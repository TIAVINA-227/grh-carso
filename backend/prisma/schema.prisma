// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                 Int       @id @default(autoincrement())
  nom_utilisateur    String    @unique
  mot_de_passe       String
  email              String    @unique
  role               String
  statut             String    @default("actif")
  date_creation      DateTime  @default(now())
  derniere_connexion DateTime?
  employe            Employe?  @relation(fields: [employeId], references: [id])
  employeId          Int?
}

model Employe {
  id             Int                @id @default(autoincrement())
  matricule      String             @unique
  nom            String
  prenom         String
  date_naissance DateTime
  adresse        String?
  email          String?            @unique
  telephone      String?
  date_embauche  DateTime

  // Relations
  departement    Departement?       @relation(fields: [departementId], references: [id])
  departementId  Int?
  poste          Poste?             @relation(fields: [posteId], references: [id])
  posteId        Int?
  utilisateur    Utilisateur?
  contrat        Contrat?
  absences       Absence[]
  presences      Presence[]
  paiements      Paiement[]
  conges         Conge[]
  performances   SuiviPerformance[]
}

model Departement {
  id             Int       @id @default(autoincrement())
  nom_departement String   @unique
  responsable     String?
  employes        Employe[]
}

model Poste {
  id_poste       Int       @id @default(autoincrement())
  intitule_poste String
  description    String?
  niveau         String?
  employes       Employe[]
}

model Contrat {
  id_contrat   Int      @id @default(autoincrement())
  type_contrat String
  date_debut   DateTime
  date_fin     DateTime?
  salaire_base Float
  statut       String   @default("actif")

  employe      Employe  @relation(fields: [employeId], references: [id])
  employeId    Int      @unique
}

model Absence {
  id_absence   Int      @id @default(autoincrement())
  date_debut   DateTime
  date_fin     DateTime
  type_absence String
  justification String?
  piece_jointe  String?

  employe      Employe  @relation(fields: [employeId], references: [id])
  employeId    Int
}

model Presence {
  id_presence    Int      @id @default(autoincrement())
  date_jour      DateTime @default(now())
  statut         String   @default("present") // present / absent / retard
  heure_travaillees Int?
  justification  String?

  employe        Employe  @relation(fields: [employeId], references: [id])
  employeId      Int
}

model Conge {
  id         Int      @id @default(autoincrement())
  date_debut DateTime
  date_fin   DateTime
  statut     String   @default("Soumis") // Soumis, Approuvé, Rejeté
  type_conge String?

  employe    Employe  @relation(fields: [employeId], references: [id])
  employeId  Int
}

model SuiviPerformance {
  id          Int      @id @default(autoincrement())
  date_eval   DateTime @default(now())
  note        Int
  commentaire String?

  employe     Employe  @relation(fields: [employeId], references: [id])
  employeId   Int
}

model Paiement {
  id_paiement   Int      @id @default(autoincrement())
  date_paiement DateTime @default(now())
  montant       Float
  mode_paiement String
  statut        String   @default("effectue")
  periode_debut DateTime
  periode_fin   DateTime

  employe       Employe  @relation(fields: [employeId], references: [id])
  employeId     Int
  bulletin      BulletinSalaire?
}

model BulletinSalaire {
  id_bulletin   Int      @id @default(autoincrement())
  mois          Int
  annee         Int
  salaire_brut  Float
  salaire_net   Float
  statut        String   @default("valide")

  paiement      Paiement @relation(fields: [paiementId], references: [id])
  paiementId    Int      @unique
}
